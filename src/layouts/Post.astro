---
import Navbar from "@components/Navbar.astro";
import type { CollectionEntry } from "astro:content";
import "@styles/prose.css";
import CommonHeadPost from "@components/CommonHeadPost.astro";

type Props = CollectionEntry<"blog">["data"];

// Now, `frontmatter`, `url`, and other Markdown layout properties
// are accessible with type safety
const {
  title,
  description,
  duration,
  pubDate,
  fileName,
  image,
  tags,
  resources,
} = Astro.props;
---

<html lang="en">
  <CommonHeadPost
    title={title}
    description={description}
    image={image}
    type="article"
    tags={tags}
    publishedTime={pubDate.toISOString()}
  />
  <body
    class="pt-28 text-lg text-gray-700 bg-white dark:text-gray-200 dark:bg-neutral-950"
  >
    <Navbar />
    <!-- prose start -->
    <!-- 4xl width bc more readable -->
    <main
      class="prose break-words pt-2 lt-xs:px-4 px-8 max-w-4xl mx-auto text-lg"
    >
      <div class="mb-8">
        <a href="/blog" class="mlink"
          ><span class="i-solar-arrow-left-linear"></span>{" "}See all posts</a
        >
      </div>

      <section class="mb-10">
        <h1 id={fileName}>{title}</h1>
        <div class="flex flex-wrap gap-1">
          <time
            datetime={pubDate.toDateString()}
            class="font-kai dark:opacity-70 opacity-80"
          >
            {
              pubDate.toLocaleDateString("en-us", {
                year: "numeric",
                month: "short",
                day: "numeric",
              })
            }</time
          >
          <span class="font-kai dark:opacity-70 opacity-80">·</span>
          <span class="font-kai dark:opacity-70 opacity-80">{duration}min</span>
          {tags && <span class="font-kai dark:opacity-70 opacity-80">·</span>}
          {
            tags && (
              <>
                {tags.map((tag) => (
                  <span
                    class={`${tag} transition-opacity ease-in-out duration-400 group-hover:opacity-100 border rounded px-1`}
                  >
                    {tag}
                  </span>
                ))}
              </>
            )
          }
        </div>
      </section>
      <article class="slide-enter-content">
        <!-- blog content is injected here -->
        <slot />
        {
          resources && (
            <>
              <h2>Resources</h2>
              <ul>
                {resources.map((resource) => (
                  <li>
                    {resource.url ? (
                      <a
                        href={resource.url}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        {resource.title}
                      </a>
                    ) : (
                      resource.title
                    )}
                    {resource.description && ` - ${resource.description}`}
                  </li>
                ))}
              </ul>
            </>
          )
        }
      </article>
    </main>
    <!-- prose end -->
  </body>
</html>
